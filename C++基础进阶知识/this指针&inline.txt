this：this会被编译器解析成A *const（A为类型）

	首先来谈谈this指针的用处：

	（1）一个对象的this指针并不是对象本身的一部分，不会影响sizeof(对象)的结果。
	（2）this作用域是在类内部，当在类的非静态成员函数中访问类的非静态成员的时候，编译器会自动将对象本身的地址作为一个隐含参数传递给函数。也就是说，即使你没有写上this指针，编译器在编译的时候也是加上this的，它作为非静态成员函数的隐含形参，对各成员的访问均通过this进行。

	其次，this指针的使用：

	（1）在类的非静态成员函数中返回类对象本身的时候，直接使用 return *this。

	（2）当参数与成员变量名相同时，如this->n = n （不能写成n = n)。	
	
	会发现编译器把上述的this，变为const A* const，这个大家也能想到，因为这个函数是const函数，那么针对const函数，它只能访问const变量与const函数，不能修改其他变量的值，所以需要一个this指向不能修改的变量，那就是const A*,又由于本身this是const指针，所以就为const A* const!
	
	总结：this在成员函数的开始执行前构造，在成员的执行结束后清除。上述的get_age函数会被解析成get_age(const A * const this),add_age函数会被解析成add_age(A* const this,int a)。在C++中类和结构是只有一个区别的：类的成员默认是private，而结构是public。this是类的指针，如果换成结构，那this就是结构的指针了。
	
inline:

	类中内联：
	内联能提高函数效率，但并不是所有的函数都定义成内联函数！内联是以代码膨胀(复制)为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。
		如果执行函数体内代码的时间相比于函数调用的开销较大，那么效率的收货会更少！
		
		另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。

		以下情况不宜用内联：

		（1）如果函数体内的代码比较长，使得内联将导致内存消耗代价比较高。

		（2）如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。
		
		class A
		{
		public:
			void f1(int x); 

			/**
			 * @brief 类中定义了的函数是隐式内联函数,声明要想成为内联函数，必须在实现处(定义处)加inline关键字。
			 *
			 * @param x
			 * @param y
			 */
			void Foo(int x,int y) ///< 定义即隐式内联函数！
			{

			};
			void f1(int x); ///< 声明后，要想成为内联函数，必须在定义处加inline关键字。  
		};
		
	实现文件中定义内联函数：
	
		#include <iostream>
		#include "inline.h"

		using namespace std;

		/**
		 * @brief inline要起作用,inline要与函数定义放在一起,inline是一种“用于实现的关键字,而不是用于声明的关键字”
		 *
		 * @param x
		 * @param y
		 *
		 * @return 
		 */
		int Foo(int x,int y);  // 函数声明
		inline int Foo(int x,int y) // 函数定义
		{
			return x+y;
		}

		// 定义处加inline关键字，推荐这种写法！
			inline void A::f1(int x){

		}

		int main()
		{

			cout<<Foo(1,2)<<endl;

		}
		/**
		 * 编译器对 inline 函数的处理步骤
		 * 将 inline 函数体复制到 inline 函数调用点处；
		 * 为所用 inline 函数中的局部变量分配内存空间；
		 * 将 inline 函数的的输入参数和返回值映射到调用方法的局部变量空间中；
		 * 如果 inline 函数有多个返回点，将其转变为 inline 函数代码块末尾的分支（使用 GOTO）。
		 */		
	
	虚函数（virtual）可以是内联函数（inline）	
		虚函数可以是内联函数，内联是可以修饰虚函数的，但是当虚函数表现多态性的时候不能实现内联。
		内联是在编译器建议编译器内联，而虚函数的多态性在运行期，编译器无法知道运行期调用哪个代码，因此虚函数表现为多态性时（运行期）不可以内联。
		
		inline virtual唯一可以内联的时候是：编译器知道所调用的对象是哪个类（如Base::who()），
		这只有在编译器具有实际对象而不是对象的指针或引用时才会发生。
		
		#include <iostream>  
		using namespace std;
		class Base
		{
		public:
			inline virtual void who()
			{
				cout << "I am Base\n";
			}
			virtual ~Base() {}
		};
		class Derived : public Base
		{
		public:
			inline void who()  // 不写inline时隐式内联
			{
				cout << "I am Derived\n";
			}
		};

		int main()
		{
			// 此处的虚函数 who()，是通过类（Base）的具体对象（b）来调用的，编译期间就能确定了，所以它可以是内联的，但最终是否内联取决于编译器。 
			Base b;
			b.who();

			// 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。  
			Base *ptr = new Derived();
			ptr->who();

			// 因为Base有虚析构函数（virtual ~Base() {}），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。
			delete ptr;
			ptr = nullptr;

			system("pause");
			return 0;
		} 		
		
		
		
		
		
		
		
		
		
		
		
		