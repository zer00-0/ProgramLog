friend
	概述：
		友元提供了一种 普通函数或者类成员函数 访问另一个类中的私有或保护成员 的机制。也就是说有两种形式的友元：

		（1）友元函数：普通函数对一个访问某个类中的私有或保护成员。
		（2）友元类：类A中的成员函数访问类B中的私有或保护成员

		优点：提高了程序的运行效率。
		缺点：破坏了类的封装性和数据的透明性。

		总结： - 能访问私有成员 - 破坏封装性 - 友元关系不可传递 - 友元关系的单向性 - 友元声明的形式及数量不受限制
		
	1.友元函数
		在类声明的任何区域中声明，而定义则在类的外部。

			friend <类型><友元函数名>(<参数表>);
		注意，友元函数只是一个普通函数，并不是该类的类成员函数，它可以在任何地方调用，友元函数中通过对象名来访问该类的私有或保护成员。
				#include <iostream>

				using namespace std;

				class A
				{
				public:
					A(int _a):a(_a){};
					friend int geta(A &ca);  ///< 友元函数
				private:
					int a;
				};

				int geta(A &ca) 
				{
					return ca.a;
				}

				int main()
				{
					A a(3);    
					cout<<geta(a)<<endl;

					return 0;
				}
	2.友元类
		友元类的声明在该类的声明中，而实现在该类外。

			friend class <友元类名>;
		类B是类A的友元，那么类B可以直接访问A的私有成员。

				#include <iostream>

				using namespace std;

				class A
				{
				public:
					A(int _a):a(_a){};
					friend class B;
				private:
					int a;
				};

				class B
				{
				public:
					int getb(A ca) {
						return  ca.a; 
					};
				};

				int main() 
				{
					A a(3);
					B b;
					cout<<b.getb(a)<<endl;
					return 0;
				}

	3.注意
		友元关系没有继承性 假如类B是类A的友元，类C继承于类A，那么友元类B是没办法直接访问类C的私有或保护成员。
		友元关系没有传递性假如类B是类A的友元，类C是类B的友元，那么友元类C是没办法直接访问类A的私有或保护成员，也就是不存在“友元的友元”这种关系。	
		
		
using
	基本使用
		局部与全局using
			#include <iostream>
			#define isNs1 1
			//#define isGlobal 2
			using namespace std;
			void func() 
			{
				cout<<"::func"<<endl;
			}

			namespace ns1 {
				void func()
				{
					cout<<"ns1::func"<<endl; 
				}
			}

			namespace ns2 {
			#ifdef isNs1 
				using ns1::func;    /// ns1中的函数
			#elif isGlobal
				using ::func; /// 全局中的函数
			#else
				void func() 
				{
					cout<<"other::func"<<endl; 
				}
			#endif
			}

			int main() 
			{
				/**
				 * 这就是为什么在c++中使用了cmath而不是math.h头文件
				 */
				ns2::func(); // 会根据当前环境定义宏的不同来调用不同命名空间下的func()函数
				return 0;
			}	

		改变访问性

			class Base{
			public:
			 std::size_t size() const { return n;  }
			protected:
			 std::size_t n;
			};
			class Derived : private Base {
			public:
			 using Base::size;
			protected:
			 using Base::n;
			};
			类Derived私有继承了Base，对于它来说成员变量n和成员函数size都是私有的，如果使用了using语句，可以改变他们的可访问性，如上述例子中，size可以按public的权限访问，n可以按protected的权限访问。 

		函数重载
			在继承过程中，派生类可以覆盖重载函数的0个或多个实例，一旦定义了一个重载版本，那么其他的重载版本都会变为不可见。
			如果对于基类的重载函数，我们需要在派生类中修改一个，又要让其他的保持可见，必须要重载所有版本，这样十分的繁琐。

				#include <iostream>
				using namespace std;

				class Base{
					public:
						void f(){ cout<<"f()"<<endl;
						}
						void f(int n){
							cout<<"Base::f(int)"<<endl;
						}
				};

				class Derived : private Base {
					public:
						using Base::f;
						void f(int n){
							cout<<"Derived::f(int)"<<endl;
						}
				};

				int main()
				{
					Base b;
					Derived d;
					d.f();
					d.f(1);
					return 0;
				}
			如上代码中，在派生类中使用using声明语句指定一个名字而不指定形参列表，所以一条基类成员函数的using声明语句就可以把该函数的所有重载实例添加到派生类的作用域中。此时，派生类只需要定义其特有的函数就行了，而无需为继承而来的其他函数重新定义。
			
		取代typedef
			C中常用typedef A B这样的语法，将B定义为A类型，也就是给A类型一个别名B

			对应typedef A B，使用using B=A可以进行同样的操作。

				typedef vector<int> V1; 
				using V2 = vector<int>;
