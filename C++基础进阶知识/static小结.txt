static
	分别有：
		静态变量： 函数中的变量，类中的变量
		静态类的成员： 类对象和类中的函数
	
	静态变量：函数中的静态变量（静态变量值保存最新的那一次调用）
		当变量声明为static时，空间将在程序的生命周期内分配。即使多次调用该函数，静态变量的空间也只分配一次，前一次调用中的变量值通过下一次函数调用传递。这对于在C / C ++或需要存储先前函数状态的任何其他应用程序非常有用
				
				#include <iostream> 
				#include <string> 
				using namespace std; 

				void demo() 
				{ 
					// static variable 
					static int count = 0; 
					cout << count << " "; 

					// value is updated and 
					// will be carried to next 
					// function calls 
					count++; 
				} 

				int main() 
				{ 
					for (int i=0; i<5; i++)  
						demo(); 
					return 0; 
				} 		
				
		类中的静态变量：
			由于声明为static的变量只被初始化一次，因为它们在单独的静态存储中分配了空间，因此类中的静态变量由对象共享。对于不同的对象，不能有相同静态变量的多个副本。也是因为这个原因，静态变量不能使用构造函数初始化。
				
	静态成员：
		类对象为静态
		就像变量一样，对象也在声明为static时具有范围，直到程序的生命周期。	
			
				#include<iostream> 
				using namespace std; 

				class Apple 
				{ 
					int i; 
					public: 
						Apple() 
						{ 
							i = 0; 
							cout << "Inside Constructor\n"; 
						} 
						~Apple() 
						{ 
							cout << "Inside Destructor\n"; 
						} 
				}; 

				int main() 
				{ 
					int x = 0; 
					if (x==0) 
					{ 
						Apple obj; 
					} 
					cout << "End of main\n"; 
				} 
				
				
				输出：  Inside Constructor
						Inside Destructor
						End of main
				在上面的程序中，对象在if块内声明为非静态。因此，变量的范围仅在if块内。因此，当创建对象时，将调用构造函数，并且在if块的控制权越过析构函数的同时调用，因为对象的范围仅在声明它的if块内。 

				#include<iostream> 
				using namespace std; 

				class Apple 
				{ 
					int i; 
					public: 
						Apple() 
						{ 
							i = 0; 
							cout << "Inside Constructor\n"; 
						} 
						~Apple() 
						{ 
							cout << "Inside Destructor\n"; 
						} 
				}; 

				int main() 
				{ 
					int x = 0; 
					if (x==0) 
					{ 
						static Apple obj; 
					} 
					cout << "End of main\n"; 
				} 
				
				输出：
					Inside Constructor
					End of main
					Inside Destructor						
				可以清楚地看到输出的变化。现在，在main结束后调用析构函数。这是因为静态对象的范围是贯穿程序的生命周期。
				
		类中的静态函数：		
			就像类中的静态数据成员或静态变量一样，静态成员函数也不依赖于类的对象。我们被允许使用对象和'.'来调用静态成员函数。
			但建议使用类名和范围解析运算符调用静态成员。

			允许静态成员函数仅访问静态数据成员或其他静态成员函数，它们无法访问类的非静态数据成员或成员函数。				
				
				
				