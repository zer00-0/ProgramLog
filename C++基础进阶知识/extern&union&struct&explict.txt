extern
	extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。此外extern也可用来进行链接指定。


	1.C++与C编译区别
		在C++中常在头文件见到extern "C"修饰函数，那有什么作用呢？ 是用于C++链接在C语言模块中定义的函数。
		C++虽然兼容C，但C++文件中函数编译后生成的符号与C语言生成的不同。因为C++支持函数重载，C++函数编译后生成的符号带有函数参数类型的信息，而C则没有。

		例如int add(int a, int b)函数经过C++编译器生成.o文件后，add会变成形如add_int_int之类的, 而C的话则会是形如_add, 就是说：相同的函数，在C和C++中，编译后生成的符号不同。

		这就导致一个问题：如果C++中使用C语言实现的函数，在编译链接的时候，会出错，提示找不到对应的符号。此时extern "C"就起作用了：告诉链接器去寻找_add这类的C语言符号，而不是经过C++修饰的符号。
		
	2.C++调用C函数
		C++调用C函数的例子: 引用C的头文件时，需要加extern "C"
		
	3、函数声明
		如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。即下述两个函数声明没有明显的区别：
			extern int f(); 和int f();
			
		当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数，在一些复杂的项目中，我比较习惯在所有的函数声明前添加extern修饰。关于这样做的原因和利弊可见下面的这个例子：“用extern修饰的全局变量”
		
	4、变量声明
		extern 表明该变量在别的地方已经定义过了,在这里要使用那个变量.
	
struct
	C和C++中的Struct区别
	C																		      C++
	不能将函数放在结构体声明											能将函数放在结构体声明
	在C结构体声明中不能使用C++访问修饰符。						public、protected、private 在C++中可以使用。
	在C中定义结构体变量，如果使用了下面定义必须加struct。					可以不加struct
	结构体不能继承（没有这一概念）。											可以继承
	若结构体的名字与函数名相同，可以正常运行且正常的调用！       使用结构体，只能使用带struct定义！		
		
union
	联合（union）是一种节省空间的特殊的类，一个 union 可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。当某个成员被赋值后其他成员变为未定义状态。
	联合有如下特点：
	
			默认访问控制符为 public
			可以含有构造函数、析构函数
			不能含有引用类型的成员
			不能继承自其他类，不能作为基类
			不能含有虚函数
			匿名 union 在定义所在作用域可直接访问 union 成员
			匿名 union 不能包含 protected 成员或 private 成员
			全局匿名联合必须是静态（static）的	
					

explict
		explicit 修饰构造函数时，可以防止隐式转换和复制初始化
		explicit 修饰转换函数时，可以防止隐式转换，但按语境转换除外
		

		
		
		
		