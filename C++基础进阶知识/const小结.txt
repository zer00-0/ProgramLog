	一、Const
		1、Const含义：常类型是指使用类型修饰符const说明的类型，常类型的变量或对象的值是不能被更新的。
				
				（1）类型检查：
					const常量与#define宏定义常量的区别：~~const常量具有类型，编译器可以进行安全检查；#define宏定义没有数据类型，只是简单的字符串替换，不能进行安全检查。
				
				（2）防止修改，起保护作用，增加程序健壮性
					
				（3）防止修改，起保护作用，增加程序健壮性
				
		2、	const对象默认为文件局部变量（加extern才可以在其他文件访问）
			注意：非const变量默认为extern。要使const变量能够在其他文件中访问，必须在文件中显式地指定它为extern
			
			小结：可以发现未被const修饰的变量不需要extern显式声明！而const常量需要显式声明extern，并且需要做初始化！因为常量在定义后就不能被修改，所以定义时必须初始化。
		
		3、指针与const
			与指针相关的const有四种：

				const char * a; //指向const对象的指针或者说指向常量的指针。
				char const * a; //同上
				char * const a; //指向类型对象的const指针。或者说常指针、const指针。
				const char * const a; //指向const对象的const指针。
			小结：如果const位于*的左侧，则const就是用来修饰指针所指向的变量，即指针指向为常量；如果const位于*的右侧，const就是修饰指针本身，即指针本身是常量。
			
			具体使用如下：

			（1）指向常量的指针（注意const修饰的类型范围）

				const int *ptr;
				*ptr = 10; //error
				ptr是一个指向int类型const对象的指针，const定义的是int类型，也就是ptr所指向的对象类型，而不是ptr本身，所以ptr可以不用赋初始值。但是不能通过ptr去修改所指对象的值。
				
			除此之外，也不能使用void*指针保存const对象的地址，必须使用const void*类型的指针保存const对象的地址。

				const int p = 10;				修饰int
				const void * vp = &p;			必须指定const修饰void类型*vp（可以理解为一个变量，强制转换类型）
				void *vp = &p; //error			未限定const修饰void类型*vp，不过在指针层面可以进行操作（如下）
				
			允许把非const对象的地址赋给指向const对象的指针。		
				将非const对象的地址赋给const对象的指针:

				const int *ptr;
				int val = 3;
				ptr = &val; //ok
				
			小结：  对于指向常量的指针，不能通过指针来修改对象的值。
					也不能使用void`*`指针保存const对象的地址，必须使用const void`*`类型的指针保存const对象的地址。
					允许把非const对象的地址赋值给const对象的指针，如果要修改指针所指向的对象值，
					必须通过其他方式修改，不能直接通过当前指针直接修改。
				
				
			（2）常指针：const指针必须进行初始化，且const指针的值不能修改。	
				例1：
					
					#include<iostream>
					using namespace std;
					int main(){

						int num=0;
						int * const ptr=&num; //const指针必须初始化！且const指针的值不能修改
						int * t = &num;			//通过非const指针来修改ptr指针所指向的值
						*t = 1;
						cout<<*ptr<<endl;		//由于ptr指向的是一个变量，而不是const常量,报错，出现：const int* -> int *错误！
					}			
			
				例2：
					
					#include<iostream>
					using namespace std;
					int main(){
						const int num=0;			//若改为 const int *ptr或者改为const int *const ptr，都可以正常！
						int * const ptr=&num; //error! const int* -> int*
						cout<<*ptr<<endl;
					}					
			
			（3）指向常量的常指针（假设提供公共接口，但该接口使用某变量但限制只读使用）

				理解完前两种情况，下面这个情况就比较好理解了：

					const int p = 3;
					const int * const ptr = &p; 
				ptr是一个const指针，然后指向了一个int 类型的const对象。
			
			
			
		4、函数中使用const
			cost修饰函数返回值：跟const修饰普通变量以及指针的含义基本相同
				（1）const int

					const int func1();
					这个本身无意义，因为参数返回本身就是赋值给其他的变量！

				（2）const int*
				
					const int* func2();
					指针指向的内容不变。

				（3）int *const

					int *const func2();
					指针本身不可变。				
		
			const修饰函数参数
				（1）传递过来的参数及指针本身在函数内不可变，无意义！

					void func(const int var); // 传递过来的参数不可变
					void func(int *const var); // 指针本身不可变
					表明参数在函数体内不能被修改，但此处没有任何意义，var本身就是形参，在函数内不会改变。
						包括传入的形参是指针也是一样。
					输入参数采用“值传递”，由于函数将自动产生临时变量用于复制该参数，该输入参数本来就无需保护，无需加const 	
				
				（2）参数指针所指内容为常量不可变
				
					void StringCopy(char *dst, const char *src);
					其中src是输入参数，dst是输出参数。给src加上const修饰后，如果函数体内的语句试图改动src的内容，
					编译器将指出错误。这就是加了const的作用之一。
			
				（3）参数为引用，为了增加效率同时防止修改。

					void func(const A &a)
					对于非内部数据类型的参数而言，象void func(A a) 这样声明的函数注定效率比较低。因为函数体内将产生A 类型
					的临时对象用于复制参数a，而临时对象的构造、复制、析构过程都将消耗时间。

					为了提高效率，可以将函数声明改为void func(A &a)，因为“引用传递”仅借用一下参数的别名而已，不需要产生临
					时对象。但是函数void func(A &a) 存在一个缺点：

						“引用传递”有可能改变参数a，这是我们不期望的。解决这个问题很容易，加const修饰即可，因此函数最终成为
			
			（3）参数为引用，为了增加效率同时防止修改。


			小结：
				对于非内部数据类型的输入参数，应该将“值传递”的方式改为“const 引用传递”，目的是提高效率。例如将void func(A a) 改为void func(const A &a)。
				对于内部数据类型的输入参数，不要将“值传递”的方式改为“const引用传递”。 否则既达不到提高效率的目的，又降低了函数的可理解性。例如void func(int x) 不应该改为void func(const int &x)。
			
			以上解决了两个面试问题：

				（1）如果函数需要传入一个指针，是否需要为该指针加上const，把const加在指针不同的位置有什么区别；
				（2）如果写的函数需要传入的参数是一个复杂类型的实例，传入值参数或者引用参数有什么区别，
					 什么时候需要为传入的引用参数加上const。
			
		5、类中使用const
			
			在一个类中，任何不会修改数据成员的函数都应该声明为const类型。如果在编写const成员函数时，不慎修改
			数据成员，或者调用了其它非const成员函数，编译器将指出错误，这无疑会提高程序的健壮性。使用const关
			字进行说明的成员函数，称为常成员函数。只有常成员函数才有资格操作常量或常对象，没有使用const关键字
			
			对于类中的const成员变量必须通过初始化列表进行初始化，如下所示：

				class Apple
				{
				private:
					int people[100];
				public:
					Apple(int i); 
					const int apple_number;
				};

				Apple::Apple(int i):apple_number(i)
				{

				}			
			
			const对象只能访问const成员函数,而非const对象可以访问任意的成员函数,包括const成员函数
			
			我们除了上述的初始化const常量用初始化列表方式外，也可以通过下面方法：

			第一：将常量定义与static结合，也就是：
				static const int apple_number
			第二：在外面初始化：
				const int Apple::apple_number=10;
			
			当然，如果你使用c++11进行编译，直接可以在定义出初始化，可以直接写成：
				static const int apple_number=10;
				或者
				const int apple_number=10;
			
			在C++中，static静态成员变量不能在类的内部初始化。在类的内部只是声明，定义必须在类定义体的外部，
			通常在类的实现文件中初始化。
				在类中声明：
					static int ap;
				在类实现文件中使用：
					int Apple::ap=666
					
					
					
					
					
					
					
					
					
					
			