1、头文件
	1.1. Self-contained 头文件
		Tip: 
			头文件应该能够自给自足（self-contained, 也就是可以作为第一个头文件被引入），以 .h 		  结尾。至于用来插入文本的文件，说到底它们并不是头文件，所以应以 .inc 结尾。不允许分离出 -inl.h 头文件的做法
		
		即一个文件并不是 self-contained 的，而是作为文本插入到代码某处。或者，文件内容实际上
		是其它头文件的特定平台（platform-specific）扩展部分。这些文件就要用 .inc 文件扩展名。
		
		如果 .h 文件声明了一个模板或内联函数，同时也在该文件加以定义。
		有个例外：
			如果某函数模板为所有相关模板参数显式实例化，或本身就是某类的一个私有成员，那么它就只能定
			义在实例化该模板的 .cc 文件里。
			
	1.2. #define 保护
		Tip: 
			所有头文件都应该使用 #define 来防止头文件被多重包含, 命名格式当是: <PROJECT>_<PATH>_<FILE>_H_
			
		为保证唯一性, 头文件的命名应该基于所在项目源代码树的全路径. 例如, 项目 foo 中的头文件 foo/src/bar/
		baz.h 可按如下方式保护:
			#ifndef FOO_BAR_BAZ_H_
			#define FOO_BAR_BAZ_H_
			…
			#endif // FOO_BAR_BAZ_H_		
					
	1.3. 前置声明（详见https://www.zhihu.com/question/63201378）
		Tip: 
			尽可能地避免使用前置声明。使用 #include 包含需要的头文件即可。
			
		定义：
			所谓「前置声明」（forward declaration）是类、函数和模板的纯粹声明，没伴随着其定义.	
			
		优点：
			• 前置声明能够节省编译时间，多余的 #include 会迫使编译器展开更多的文件，处理更多的输入。
			• 前置声明能够节省不必要的重新编译的时间。#include 使代码因为头文件中无关的改动而被重新编译多次。
		缺点：
			• 前置声明隐藏了依赖关系，头文件改动时，用户的代码会跳过必要的重新编译过程。
			• 前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其 API.
			  例如扩大形参类型，加个自带默认参数的模板形参等等。
			• 前置声明来自命名空间 std:: 的 symbol 时，其行为未定义。
			• 很难判断什么时候该用前置声明，什么时候该用 #include 。极端情况下，用前置声明代替includes   甚至都会暗暗地改变代码的含义：	
			
		如果 #include 被 B 和 D 的前置声明替代，test() 就会调用 f(void*) . * 前置声明了不少来自头文件的
		symbol 时，就会比单单一行的 include 冗长。* 仅仅为了能前置声明而重构代码（比如用指针成员代替
		对象成员）会使代码变得更慢更复杂.	
			// b.h:
			struct B {};
			struct D : B {};

			// good_user.cc:
			#include "b.h"
			void f(B*);
			void f(void*);
			void test(D* x) { f(x); }  // calls f(B*)
		例如，如果一个类的实现者需要把这个类改个名字/换个命名空间，出于兼容性他原本可以在原命名空间里/用原名通过using来起一个别名指向新类。然而别名不能被前向声明。内网有一份代码改动一下子试图修改总计265个头文件，就是实现者为了要改这个类的名字而不得不去改所有的调用处。想一想，如果这265个文件分属于50个不同的团队，你得拿到50个人的同意才能提交这份改动，想不想打人？			
			
		结论：
			• 尽量避免前置声明那些定义在其他项目中的实体. 
			• 函数：总是使用 #include. 
			• 类模板：优先使用 #include	
			
	1.4. 内联函数
		Tip: 
			只有当函数只有 10 行甚至更少时才将其定义为内联函数.
			
		结论:
			•一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起
				来要更长, 因为有隐含的成员和基类析构函数被调用!
			•另一个实用的经验准则: 内联那些包含循环或 switch 语句的函数常常是得不偿失 (除非在大多数情况下,
				这些循环或 switch 语句从不被执行).
			•有些函数即使声明为内联的也不一定会被编译器内联, 这点很重要; 比如虚函数和递归函数就不会被正常内联
			
	1.5. #include的路径及顺序
		Tip: 
			使用标准的头文件包含顺序可增强可读性, 避免隐藏依赖: 相关头文件, C 库, C++ 库, 其他库的 .h,项目内的 .h.
		
		项目内头文件应按照项目源代码目录树结构排列, 避免使用 UNIX 特殊的快捷目录 . (当前目录) 或 .. (上级目录). 
			例如, google-awesome-project/src/base/logging.h 应该按如下方式包含:
			 
					#include "base/logging.h"	
			
		又如, dir/foo.cc 的主要作用是实现或测试 dir2/foo2.h 的功能, foo.cc 中包含头文件的次序如下:
		
			1. dir2/foo2.h (优先位置, 详情如下)
			2. C 系统文件
			3. C++ 系统文件
			4. 其他库的 .h 文件
			5. 本项目内 .h 文件
			
		这种优先的顺序排序保证当 dir2/foo2.h 遗漏某些必要的库时，dir/foo.cc 或 dir/foo_test.cc 的构建会立
		刻中止。因此这一条规则保证维护这些文件的人首先看到构建中止的消息而不是维护其他包的人。
		dir/foo.cc 和 dir2/foo2.h 通常位于同一目录下 (如 base/basictypes_unittest.cc 和 base/basictypes.h),
		但也可以放在不同目录下.			
		
	    按字母顺序对头文件包含进行二次排序是不错的主意。注意较老的代码可不符合这条规则，要在方便的时候改正它们		
	
	小结1：	
		1. 避免多重包含是学编程时最基本的要求;
		2. 前置声明是为了降低编译依赖，防止修改一个头文件引发多米诺效应;
		3. 内联函数的合理使用可提高代码执行效率;
		4. -inl.h 可提高代码可读性 (一般用不到吧:D);
		5. 标准化函数参数顺序可以提高可读性和易维护性 (对函数参数的堆栈空间有轻微影响, 我以前大多是相同类型放
		在一起);
		6. 包含文件的名称使用 . 和 .. 虽然方便却易混乱, 使用比较完整的项目路径看上去很清晰, 很条理, 包含文件的
		次序除了美观之外, 最重要的是可以减少隐藏依赖, 使每个头文件在 “最需要编译” (对应源文件处:D) 的地方编
		译, 有人提出库文件放在最后, 这样出错先是项目内的文件, 头文件都放在对应源文件的最前面, 这一点足以保证
		内部错误的及时发现了.		
		
	小结2：
		1. 原来还真有项目用 #includes 来插入文本，且其文件扩展名 .inc 看上去也很科学。
		2. Google 已经不再提倡 -inl.h 用法。
		3. 注意，前置声明的类是不完全类型（incomplete type），我们只能定义指向该类型的指针或引用，或者声明（但
		不能定义）以不完全类型作为参数或者返回类型的函数。毕竟编译器不知道不完全类型的定义，我们不能创建
		其类的任何对象，也不能声明成类内部的数据成员。
		4. 类内部的函数一般会自动内联。所以某函数一旦不需要内联，其定义就不要再放在头文件里，而是放到对应的
		.cc 文件里。这样可以保持头文件的类相当精炼，也很好地贯彻了声明与定义分离的原则。
		5. 在 #include 中插入空行以分割相关头文件, C 库, C++ 库, 其他库的 .h 和本项目内的 .h 是个好习惯		
		
2、作用域
	2.1.命名空间
		Tip: 
			鼓励在 .cc 文件内使用匿名名字空间. 使用具名的名字空间时, 其名称可基于项目名或相对路径. 禁止使用using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。
		
		2.1.1. 匿名命名空间
			• 在 .cc 文件中, 允许甚至鼓励使用匿名名字空间, 以避免运行时的命名冲突:
	
				namespace { // .cc 文件中
				// 名字空间的内容无需缩进
				enum { kUNUSED, kEOF, kERROR }; // 经常使用的符号
				bool AtEof() { return pos_ == kEOF; } // 使用本名字空间内的符号 EOF
				} // namespace	
				
				然而, 与特定类关联的文件作用域声明在该类中被声明为类型, 静态数据成员或静态成员函数, 而不是匿名名字空
				间的成员. 如上例所示, 匿名空间结束时用注释 // namespace 标识. 
			• 不要在 .h 文件中使用匿名名字空间.		
			
		2.1.2.具名命名空间
			具名的名字空间使用方式如下: 
			• 用名字空间把文件包含, gflags 的声明/定义, 以及类的前置声明以外的整个源文件封装起来, 以区别于其它命名空间			
	
				// 在.h 文件中声明
				namespace mynamespace {
				// 所有声明都置于命名空间中
				// 注意不要使用缩进
				class MyClass {
				public:
				…
				void Foo();
				};
				} // namespace mynamespace
				
				// 在.cc 文件中定义
				namespace mynamespace {
				// 函数定义都置于命名空间中
				void MyClass::Foo() {
				… }
				} // namespace mynamespace	
		
			• 不要在命名空间 std 内声明任何东西, 包括标准库的类前置声明. 在 std 命名空间声明实体会导致不确定的问
				题, 比如不可移植. 声明标准库下的实体, 需要包含对应的头文件. 
				
			• 最好不要使用 using 指示，以保证命名空间下的所有名称都可以正常使用.
				// 禁止 —— 污染命名空间
					using namespace foo;
					
			• 在 .cc 文件, .h 文件的函数, 方法或类中, 可以使用 using 声明。
				// 允许: .cc 文件中
				// .h 文件的话, 必须在函数, 方法或类的内部使用
					using ::foo::bar;
					
			• 在 .cc 文件, .h 文件的函数, 方法或类中, 允许使用命名空间别名.	
				// 允许: .cc 文件中
				// .h 文件的话, 必须在函数, 方法或类的内部使用
					namespace fbz = ::foo::bar::baz;
					
				// 在 .h 文件里
					namespace librarian {
					//以下别名在所有包含了该头文件的文件中生效。
					namespace pd_s = ::pipeline_diagnostics::sidetable;
					inline void my_inline_function() {
						// namespace alias local to a function (or method).
						namespace fbz = ::foo::bar::baz;
						...
					}} // namespace librarian	
	
				注意在.h 文件的别名对包含了该头文件的所有人可见，所以在公共头文件（在项目外可用）以及它们
				递归包含的其它头文件里，不要用别名。毕竟原则上公共 API 要尽可能地精简。
			• 禁止用内联命名空间
	
	2.2.嵌套类
		Tip: 
			当公有嵌套类作为接口的一部分时, 虽然可以直接将他们保持在全局作用域中, 但将嵌套类的声明置于2.1. 名字空间 内是更好的选择.
		结论:
			不要将嵌套类定义成公有, 除非它们是接口的一部分, 比如, 嵌套类含有某些方法的一组选项.
	
	2.3.非成员函数、静态成员函数和全局函数
		Tip: 
			使用静态成员函数或命名空间内的非成员函数, 尽量不要用未封装的全局函数
	
		结论:
		•有时, 把函数的定义同类的实例脱钩是有益的, 甚至是必要的. 这样的函数可以被定义成静态成员, 或是非
		 成员函数. 非成员函数不应依赖于外部变量, 应尽量置于某个命名空间内. 相比单纯为了封装若干不共享
		 任何静态数据的静态成员函数而创建类, 不如使用2.1. 命名空间。
		
		•定义在同一编译单元的函数, 被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖; 静态成员
		 函数对此尤其敏感. 可以考虑提取到新类中, 或者将函数置于独立库的命名空间内.
		
		•如果你必须定义非成员函数, 又只是在 .cc 文件中使用它, 可使用匿名 namespaces‘或 ‘‘static‘ 链接关键字
		 (如 static int Foo() {...}) 限定其作用域.	
	
	2.4.局部变量
		Tip: 
			将函数变量尽可能置于最小作用域内, 并在变量声明时进行初始化.
			
			C++ 允许在函数的任何位置声明变量. 我们提倡在尽可能小的作用域中声明变量, 离第一次使用越近越好. 这使
			得代码浏览者更容易定位变量声明的位置,了解变量的类型和初始值.特别是，应使用初始化的方式替代声明再赋值	
				
			Warning: 如果变量是一个对象, 每次进入作用域都要调用其构造函数, 每次退出作用域都要调用其析构函数.
		
		
	2.5.静态与全局变量
		Tip: 
			禁止使用 class 类型的静态或全局变量：它们会导致难以发现的 bug 和不确定的构造和析构函数调用顺序。不过 constexpr 变量除外，毕竟它们又不涉及动态初始化或析构。		
	
		•静态生存周期的对象，即包括了全局变量，静态变量，静态类成员变量和函数静态变量，都必须是原生数据类型(POD : 
		 Plain Old Data): 即 int, char 和 float, 以及 POD 类型的指针、数组和结构体。		
		
		•静态变量的构造函数、析构函数和初始化的顺序在 C++ 中是不确定的，甚至随着构建变化而变化，导致难以发现的 bug.
		 所以除了禁用类类型的全局变量，我们也不允许用函数返回值来初始化 POD 变量，除非该函数不涉及
		（比如 getenv() 或 getpid()）不涉及任何全局变量。（函数作用域里的静态变量除外，毕竟它的初始化顺序是有明确
		 定义的，而且只会在指令执行到它的声明那里才会发生。）
		 
		•同理，全局和静态变量在程序中断时会被析构，无论所谓中断是从 main() 返回还是对 exit() 
		 的调用。析构顺序正好与构造函数调用的顺序相反。但既然构造顺序未定义，那么析构顺序当然也就不定了。
		
		•改善以上析构问题的办法之一是用 quick_exit() 来代替 exit() 并中断程序。它们的不同之处是前者不会执行
		 任何析构，也不会执行 atexit() 所绑定的任何 handlers. 如果您想在执行 quick_exit() 来中断时执行某 handler
		 （比如刷新 log），您可以把它绑定到 _at_quick_exit(). 如果您想在 exit() 和 quick_exit() 都用上该 handler, 都
		 绑定上去。
		
		综上所述，我们只允许 POD 类型的静态变量，即完全禁用 vector (使用 C 数组替代) 和 string (使用 constchar [])。
		
		如果您确实需要一个 class 类型的静态或全局变量，可以考虑在 main() 函数或 pthread_once() 内初始化一个
		指针且永不回收。注意只能用 raw 指针，别用智能指针，毕竟后者的析构函数涉及到上文指出的不定顺序问题。
		
		
		小结1：
		1. cc 中的匿名名字空间可避免命名冲突, 限定作用域, 避免直接使用 using 关键字污染命名空间;
		2. 嵌套类符合局部使用原则, 只是不能在其他头文件中前置声明, 尽量不要 public;
		3. 尽量不用全局函数和全局变量, 考虑作用域和命名空间限制, 尽量单独形成编译单元;
		4. 多线程中的全局变量 (含静态成员变量) 不要使用 class 类型 (含 STL 容器), 避免不明确行为导致的 bug.
		5. 作用域的使用, 除了考虑名称污染, 可读性之外, 主要是为降低耦合, 提高编译/执行效率.
		
		小结2：
		1. 注意「using 指示（using-directive）」和「using 声明（using-declaration）」的区别。
		2. 匿名名字空间说白了就是文件作用域，就像 C static 声明的作用域一样，后者已经被 C++ 标准提倡弃用。
		3. 局部变量在声明的同时进行显式值初始化，比起隐式初始化再赋值的两步过程要高效，同时也贯彻了计算机体
		系结构重要的概念「局部性（locality）」。
		4. 注意别在循环犯大量构造和析构的低级错误。		
	
3.类
	3.1. 构造函数的职责
		Tip: 
			不要在构造函数中进行复杂的初始化 (尤其是那些有可能失败或者需要调用虚函数的初始化)
	
		结论:
			构造函数不得调用虚函数, 或尝试报告一个非致命错误. 如果对象需要进行有意义的 (non-trivial) 初始化,
			考虑使用明确的 Init() 方法或使用工厂模式
		
	3.2.初始化
		Tip: 
			如果类中定义了成员变量, 则必须在类中为每个类提供初始化函数或定义一个构造函数. 若未声明构造函数, 
			则编译器会生成一个默认的构造函数, 这有可能导致某些成员未被初始化或被初始化为不恰当的值.
		
		结论:
			•简单的初始化用类成员初始化完成, 尤其是当一个成员变量要在多个构造函数里用相同的方式初始化的时候.
			•如果你的类中有成员变量没有在类里面进行初始化, 而且没有提供其它构造函数, 你必须定义一个 (不带参数的) 默认构造函数. 把对象的内部状态初始化成一致/ 有效的值无疑是更合理的方式.
				这么做的原因是: 如果你没有提供其它构造函数, 又没有定义默认构造函数, 编译器将为你自动
				生成一个. 编译器生成的构造函数并不会对对象进行合理的初始化.
				如果你定义的类继承现有类, 而你又没有增加新的成员变量, 则不需要为新类定义默认构造函数	
		
	3.3.显式构造函数
		Tip: 
			对单个参数的构造函数使用 C++ 关键字 explicit.
		
		通常, 如果构造函数只有一个参数, 可看成是一种隐式转换. 打个比方, 如果你定义了 Foo::Foo(string
		name), 接着把一个字符串传给一个以 Foo 对象为参数的函数, 构造函数 Foo::Foo(string name) 将被
		调用, 并将该字符串转换为一个 Foo 的临时对象传给调用函数（如父类转换成子类类型）
		除单参数构造函数外, 这一规则也适用于除第一个参数以外的其他参数都具有默认参数的构造函数
		
		
		结论:
			所有单参数构造函数都必须是显式的. 在类定义中, 将关键字 explicit 加到单参数构造函数前: explicit
			Foo(string name);
	
	3.4. 可拷贝类型与可移动类型
		Tip: 
			如果你的类型需要, 就让它们支持拷贝/ 移动. 否则, 就把隐式产生的拷贝和移动函数禁用.
		
		定义：
			可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 	
			同时不改变源对象的值，（ string 类型就是一个可拷贝类型的例子.）
			
			可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的)（std::unique_ptr<int> 就是一个可移动但不可复制的对象的例子）
			移动操作允许隐式且高效地将源数据转移出右值对象
		
		结论:
			如果需要就让你的类型可拷贝/ 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一
			眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值
			操作的定义. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造
			函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类
			型设置为只可移动并定义移动的两个操作.
			
				建议通过 = default 定义拷贝和移动操作. 定义非默认的移动操作目前需要异常. 时刻记得检
				测默认操作的正确性. 由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操
				作或者拷贝/ 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复
				制属性, 请提供一个 public virtual Clone() 和一个 protected 的拷贝构造函数以供派生类
				实现.
				如果你的类不需要拷贝/ 移动操作, 请显式地通过 = delete 或其他手段禁用之		
		
		
	3.5.委派与继承构造函数
		Tip: 
			在能够减少重复代码的情况下使用委派和继承构造函数
		
		定义:
			委派和继承构造函数是由 C++11 引进为了减少构造函数重复代码而开发的两种不同的特性. 通过特殊的
			初始化列表语法, 委派构造函数允许类的一个构造函数调用其他的构造函数. 
			例如: 
					X::X(const string& name) : name_(name) {
					...
					}X::X() : X("") { }		
		
		结论:
			只在能够减少冗余代码, 提高可读性的前提下使用委派和继承构造函数. 如果派生类有新的成员变量, 那么
			使用继承构造函数时要小心. 如果在派生类中对成员变量使用了类内部初始化的话, 继承构造函数还是适
			用的.		
		
		
	3.6.结构体与类
		Tip: 
			当且仅当只有数据时使用 struct, 其它一概使用 class.
		
		为了和 STL 保持一致, 对于仿函数和 trait 特性可以不用 class 而是使用 struct.
		注意: 类和结构体的成员变量使用不同的命名规则.
		
	3.7.继承
		Tip: 
			使用组合 (composition, YuleFox 注: 这一点也是 GoF 在 <<Design Patterns>> 里反复强调的) 
			常常比使用继承更合理. 如果使用继承的话, 定义为 public 继承
		
		结论:
			所有继承必须是 public 的. 如果你想使用私有继承, 你应该替换成把基类的实例作为成员对象的方式.
			不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, YuleFox 注: 其他 “has-a”
			情况下请使用组合) 的情况下使用继承: 如果 Bar 的确 “是一种” Foo, Bar 才能继承 Foo.
			必要的话, 析构函数声明为 virtual. 如果你的类有虚函数, 则析构函数也应该为虚函数. 注意数据成员在
			任何情况下都必须是私有的.
			当重载一个虚函数, 在衍生类中把它明确的声明为 virtual. 理论依据: 如果省略 virtual 关键字, 代码阅
			读者不得不检查所有父类, 以判断该函数是否是虚函数.		
		
	3.8.多重继承
		Tip: 
			真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 Interface 为后缀的纯接口类
		
		结论:
			只有当所有父类除第一个外都是纯接口类 时, 才允许使用多重继承. 为确保它们是纯接口, 这些类必须以
			Interface 为后缀.		
		
		