1、创建本地仓库	
	创建版本库
		跳转至相应目录
			$ cd 地址（跨盘加 /d）
		建立仓库	
			$ mkdir learngit
		
		初始化git
			$ git init
	把文件添加到版本库
		增加到缓存区
			$ git add test.txt
		提交到仓库
			$ git commit -m"提交的备注信息"

	版本操作
		查看当前仓库状态
			$ git status
		查看修改的历史记录	
			$ git diff test.txt
		添加修改到缓存区	
			$ git add test.txt
		提交到仓库	
			$ git commit -m"XXX"

	版本退回
		显示从最近到最远的提交日志信息
			$ git log
		查看当前文件信息	
			$ type test.txt
		退回上一个版本，HEAD表示当前版本，HEAD^表示上一个，HEAD^^表示上两个，……	
			$ git reset --hard HEAD^
		显示历史上的所有提交记录，显示相应的哈希ID
			$ git reflog
		返回到哈希ID：7dd4e的那个版本	
			$ git reset --hard 7dd4e

	撤销修改
		显示文件信息
			win：
			$ type readme.txt	
			Linux
			$ cat readme.txt
			
		丢弃工作区的修改	
			$ git checkout --readme.txt
		
		删除文件（如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
				  你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。）
			一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
			$ rm test.txt
			操作前最好查看状态
			$ git status	
			$ git commit -m"删除test.txt"
		
2、创建远程仓库
	设置SSH（key）密码，在C:\Users\Administrator.PC-20160830RJKS 看看有无.ssh目录，若无使用
		$ ssh-keygen -t rsa -C "2801321286.com"
			可以可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
			id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	将本地的产库与GitHub的远程仓库关联起来（通过上面的密匙）
		$ git remote add origin git@github.com:zer00-0/learngit.git
	第一次推送时，
		$ git push -u origin master		git push 实际上将当前分支master推送到远程，由远程仓库为空加-u
	以后的推送，
		$ git push origin master
		
3、删除远程库
	如果添加的时候地址写错了，或者就是想删除远程库，可以用git remote rm <name>命令。
	使用前，建议先用git remote -v查看远程库信息：
		$ git remote -v	查看远程库信息
		$ git remote rm origin	删除origin

4、从远程库克隆
	$ git clone git@github.com:michaelliao/gitskills.git	地址注意换
	$ cd gitskills	切换地址
	$ ls	查看文件
	
5、分支管理
	创建与分支合并
		创建dev分支，然后切换到dev分支：
			$ git checkout -b dev
				其中，git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
					$ git branch dev 
					$ git checkout dev
			
		用git branch命令查看当前分支：
			$ git branch
			* dev
			main
		提交文件（此时在dev分支）
			$ git add readme.txt
			$ git commit -m "branch test"
		dev分支的工作完成，我们就可以切换回master分支：
			$ git checkout main
		切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！
		因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
		（即master在dev的下一个分支）	
		我们把dev分支的工作成果合并到master分支上：	
			$ git merge dev 用于合并指定分支到当前分支
		合并完成后，就可以放心地删除dev分支了：
			$ git branch -d dev
		删除后，查看branch，就只剩下master分支了：
			$ git branch
			main
			
	swtich 	切换分支使用git checkout <branch>，而撤销修改则是git checkout -- <file>，同一个命令，有两种作用
			故使用switch较佳
			
			创建并切换到新的dev分支，可以使用：
				$ git switch -c dev
			直接切换到已有的master分支，可以使用：
				$ git switch master
		
	小结：
		查看分支：git branch

		创建分支：git branch <name>

		切换分支：git checkout <name>或者git switch <name>

		创建+切换分支：git checkout -b <name>或者git switch -c <name>

		合并某分支到当前分支：git merge <name>

		删除分支：git branch -d <name>
	
6、解决冲突
		准备新的feature1分支，继续我们的新分支开发：
			$ git switch -c feature1
		
		修改readme.txt最后一行，改为：
			Creating a new branch is quick AND simple.
		
		在feature1分支上提交：
			$ git add readme.txt
			$ git commit -m "AND simple"

		切换到master分支：
			$ git switch master
			Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。

		在master分支上把readme.txt文件的最后一行改为：
			Creating a new branch is quick & simple.
		提交：
			$ git add readme.txt 
			$ git commit -m "& simple"
		
		由此main与feature1两个分支同时修改同样的readme.txt，
			造成冲突，切换branch可以发现readme.txt的最后一行不一样
				无法快速merge
			$ git merge feature1

		Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：	
			$ git status


			no changes added to commit (use "git add" and/or "git commit -a")
		我们可以直接查看readme.txt的内容：
			$ cat readme.txt

			<<<<<<< HEAD
			Creating a new branch is quick & simple.
			=======
			Creating a new branch is quick AND simple.
			>>>>>>> feature1
		
		Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：
		直接对readme.txt进行修改，一开始显式内容为：
			<<<<<<< HEAD
			Creating a new branch is quick & simple.
			=======
			Creating a new branch is quick AND simple.
			>>>>>>> feature1
		
		修改为
			Creating a new branch is quick and simple.
		再提交：

		$ git add readme.txt 
		$ git commit -m "conflict fixed"
		[master cf810e4] conflict fixed		
	
		用带参数的git log也可以看到分支的合并情况：
			$ git log --graph --pretty=oneline --abbrev-commit

			
		最后，删除feature1分支：
			$ git branch -d feature1

7、分支管理策略
	通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	
	首先，仍然创建并切换dev分支：
		$ git switch -c dev

	修改readme.txt文件，并提交一个新的commit：
		$ git add readme.txt 
		$ git commit -m "add merge"

	现在，我们切换回master：
		$ git switch master

	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
		$ git merge --no-ff -m "merge with no-ff" dev

	因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

	合并后，我们用git log看看分支历史（no-ff后就会显示完整的分支合并情况）：
		$ git log --graph --pretty=oneline --abbrev-commit
		*   e1e9c68 (HEAD -> master) merge with no-ff
		|\  
		| * f52c633 (dev) add merge
		|/  
		*   cf810e4 conflict fixed	

8、	BUG分支
	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
		$ git status
		
	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
		$ git stash
	
	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
		$ git checkout master
		$ git checkout -b issue-101
		
	现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：
		$ git add readme.txt 
		$ git commit -m "fix bug 101"
	
	修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
		$ git switch master
		$ git merge --no-ff -m "merged bug fix 101" issue-101
	
	太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！
		$ git switch dev
		$ git status
	
	工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
		$ git stash list
	
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	另一种方式是用git stash pop，恢复的同时把stash内容也删了：
		$ git stash pop
	再用git stash list查看，就看不到任何stash内容了
		$ git stash list
	
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		$ git stash apply stash@{0}

	在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。
	那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？
	有木有更简单的方法？
	有！
	同样的bug，要在dev上修复，我们只需要把4c805e2 fix bug 101这个提交所做的修改“复制”到dev分支。
	注意：我们只想复制4c805e2 fix bug 101这个提交所做的修改，并不是把整个master分支merge过来。
	为了方便操作，Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支：
		$ git branch
		$ git cherry-pick 4c805e2
		
	Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于master的4c805e2，因为这两个commit只是改动相同，
	但确实是两个不同的commit。用git cherry-pick，我们就不需要在dev分支上手动再把修bug的过程重复一遍。
		
9、Feature分支（销毁分支）
	添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，
	最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
	现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
	于是准备开发：
		$ git switch -c feature-vulcan
		$ git add vulcan.py

		$ git status
		On branch feature-vulcan
		Changes to be committed:
		  (use "git reset HEAD <file>..." to unstage)
			new file:   vulcan.py

		$ git commit -m "add feature vulcan"
		[feature-vulcan 287773e] add feature vulcan
		 1 file changed, 2 insertions(+)
		 create mode 100644 vulcan.py

	切回dev，准备合并：
		$ git switch dev
	就在此时，接到上级命令，因经费不足，新功能必须取消！
	虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：
		$ git branch -d feature-vulcan
		error: The branch 'feature-vulcan' is not fully merged.
		If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
	销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，
	如果要强行删除，需要使用大写的-D参数。。
	现在我们强行删除：
		$ git branch -D feature-vulcan

10、多人协作
	要查看远程库的信息，用git remote：
		$ git remote
	用git remote -v显示更详细的信息：
		$ git remote -v
	
	推送分支（推送分支，就是把该分支上的所有本地提交推送到远程库。）
	推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：	
		$ git push origin master
	如果要推送其他分支，比如dev，就改成：
		$ git push origin dev
	
	抓取分支
			$ git clone git@github.com:michaelliao/learngit.git
	
	当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
	必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
		$ git checkout -b dev origin/dev
	他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
		$ git add env.txt
		$ git commit -m "add env"
		$ git push origin dev
	
	你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：
		$ cat env.txt
		$ git add env.txt
		$ git commit -m "add new env"
		$ git push origin dev
		
	发现提交与项目其他人冲突，解决办法也很简单，Git已经提示我们，
	先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：	
		$ git pull
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：	
		$ git branch --set-upstream-to=origin/dev dev
	再pull：
		$ git pull	
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
		$ git commit -m "fix env conflict"
		$ git push origin dev
		
		
	因此，多人协作的工作模式通常是这样：

		首先，可以试图用git push origin <branch-name>推送自己的修改；

		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

		如果合并有冲突，则解决冲突，并在本地提交；

		没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

		这就是多人协作的工作模式，一旦熟悉了，就非常简单。

	小结
		查看远程库信息，使用git remote -v；

		本地新建的分支如果不推送到远程，对其他人就是不可见的；

		从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

		建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。	
	
11、Rebase（Git的提交历史变成一条干净的直线）
	每次合并再push后，分支变成了这样：
		$ git log --graph --pretty=oneline --abbrev-commit
		* d1be385 (HEAD -> master, origin/master) init hello
		*   e5e69f1 Merge branch 'dev'
		|\  
		| *   57c53ab (origin/dev, dev) fix env conflict
		| |\  
		| | * 7a5e5dd add env
		| * | 7bd91f1 add new env
		| |/  
		* |   12a631b merged bug fix 101
		|\ \  
		| * | 4c805e2 fix bug 101
		|/ /  
		* |   e1e9c68 merge with no-ff
		|\ \  
		| |/  
		| * f52c633 add merge
		|/  
		*   cf810e4 conflict fixed	
	
	在和远程分支同步后，我们对hello.py这个文件做了两次提交。用git log命令看看：
		$ git log --graph --pretty=oneline --abbrev-commit
	
	现在我们尝试推送本地分支：
		$ git push origin master
	很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：
		$ git pull
	再用git status看看状态：
		$ git status	
	加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。
	用git log看看：
		$ git log --graph --pretty=oneline --abbrev-commit
		*   e0ea545 (HEAD -> master) Merge branch 'master' of github.com:michaelliao/learngit
		|\  
		| * f005ed4 (origin/master) set exit=1
		* | 582d922 add author
		* | 8875536 add comment
		|/  
		* d1be385 init hello		
		
	这个时候，rebase就派上了用场。我们输入命令git rebase试试：
		$ git rebase
	输出了一大堆操作，到底是啥效果？再用git log看看：
		$ git log --graph --pretty=oneline --abbrev-commit
		* 7e61ed4 (HEAD -> master) add author
		* 3611cfe add comment
		* f005ed4 (origin/master) set exit=1
		* d1be385 init hello		


12、标签管理（标签也是版本库的一个快照。）
	
	在Git中打标签非常简单，首先，切换到需要打标签的分支上：
		$ git branch
		$ git checkout master
	然后，敲命令git tag <name>就可以打一个新标签：
		$ git tag v1.0
	可以用命令git tag查看所有标签：
		$ git tag
	默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
	方法是找到历史提交的commit id，然后打上就可以了：
		$ git log --pretty=oneline --abbrev-commit
	比方说要对add merge这次提交打标签，它对应的commit id是f52c633，敲入命令：
		$ git tag v0.9 f52c633	
	注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
		$ git show v0.9	
	还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
		$ git tag -a v0.1 -m "version 0.1 released" 1094adb
	用命令git show <tagname>可以看到说明文字：
		$ git show v0.1	
	
	操作标签
		如果标签打错了，也可以删除：
			$ git tag -d v0.1		
		因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
		如果要推送某个标签到远程，使用命令git push origin <tagname>：
			$ git push origin v1.0		
		如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
			$ git tag -d v0.9		
		然后，从远程删除。删除命令也是push，但是格式如下：
			$ git push origin :refs/tags/v0.9	
			
			
	小结
		命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

		命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

		命令git tag可以查看所有标签。
		
13、自定义Git

	比如，让Git显示颜色，会让命令输出看起来更醒目：
		$ git config --global color.ui true
		
	忽略特殊文件
		有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，
		每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。
		好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，
		然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

		不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
		所有配置文件可以直接在线浏览：https://github.com/github/gitignore

		忽略文件的原则是：

			1、忽略操作系统自动生成的文件，比如缩略图等；
			2、忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，
				那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
			3、忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。		
	有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
		$ git add App.class	
	如果你确实想添加该文件，可以用-f强制添加到Git：
		$ git add -f App.class	
	或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
		$ git check-ignore -v App.class	
	Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。

	还有些时候，当我们编写了规则排除了部分文件时：
		# 排除所有.开头的隐藏文件:
		.*
		# 排除所有.class文件:
		*.class
	但是我们发现.*这个规则把.gitignore也排除了，并且App.class需要被添加到版本库，但是被*.class规则排除了。

	虽然可以用git add -f强制添加进去，但有强迫症的童鞋还是希望不要破坏.gitignore规则，这个时候，可以添加两条例外规则：

		# 排除所有.开头的隐藏文件:
		.*
		# 排除所有.class文件:
		*.class

		# 不排除.gitignore和App.class:
		!.gitignore
		!App.class
	把指定文件排除在.gitignore规则外的写法就是!+文件名，所以，只需把例外文件添加进去即可。	

14、配置别名
	有没有经常敲错命令？比如git status？status这个单词真心不好记。
	如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
	我们只需要敲一行命令，告诉Git，以后st就表示status：

		$ git config --global alias.st status
	好了，现在敲git st看看效果。

	当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
	$ git config --global alias.co checkout
	$ git config --global alias.ci commit
	$ git config --global alias.br branch
	
	以后提交就可以简写成：
	$ git ci -m "bala bala bala..."
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。

	在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。
	既然是一个unstage操作，就可以配置一个unstage别名：

	$ git config --global alias.unstage 'reset HEAD'
	当你敲入命令：

	$ git unstage test.py
	实际上Git执行的是：

	$ git reset HEAD test.py
	配置一个git last，让其显示最后一次提交信息：

	$ git config --global alias.last 'log -1'
	这样，用git last就能显示最近一次的提交：

	$ git last
	commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2
	Merge: bd6ae48 291bea8
	Author: Michael Liao <askxuefeng@gmail.com>
	Date:   Thu Aug 22 22:49:22 2013 +0800

		merge & fix hello.py
	甚至还有人丧心病狂地把lg配置成了：

	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s 
		%Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"	
		
	配置文件
		配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。

		配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：

		$ cat .git/config 
		[core]
			repositoryformatversion = 0
			filemode = true
			bare = false
			logallrefupdates = true
			ignorecase = true
			precomposeunicode = true
		[remote "origin"]
			url = git@github.com:michaelliao/learngit.git
			fetch = +refs/heads/*:refs/remotes/origin/*
		[branch "master"]
			remote = origin
			merge = refs/heads/master
		[alias]
			last = log -1
		别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

		而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

		$ cat .gitconfig
		[alias]
			co = checkout
			ci = commit
			br = branch
			st = status
		[user]
			name = Your Name
			email = your@email.com
		配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。		
		
		
		
		